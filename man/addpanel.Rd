% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/addpanel.R
\name{addpanel}
\alias{addpanel}
\title{addpanel}
\usage{
addpanel(figure, panel, topPanel = 1, bottomPanel = topPanel,
  leftPanel = 1, rightPanel = leftPanel, label = NULL)
}
\arguments{
\item{figure}{Object of classes \code{multipanelfigure}/\code{\link[gtable]{gtable}}
as produced by \code{\link{multipanelfigure}} and representing the figure the
panel is to be placed in.}

\item{panel}{Single \code{\link{character}} object representing path to a
bitmap image (\code{*.png}, \code{*.tiff}/\code{*.tif},
\code{*.jpg}/\code{*.jpeg}), a \code{\link[ggplot2]{ggplot}} object , a
\code{\link[lattice]{trellis.object}}, a \code{\link[grid]{gList}} object or
a \code{\link[grid]{grob}} object to be placed in a multipanel figure. See
'Details'.}

\item{topPanel}{Single \code{\link[base]{numeric}} indicating the row index of
the panel that is to be placed in the figure.}

\item{bottomPanel}{Single \code{\link[base]{numeric}} indicating the lower row
index of the panel that is to be placed in the figure. Important for
definition of panel spanning (see examples).}

\item{leftPanel}{Single \code{\link[base]{numeric}} indicating the column index
of the panel that is to be placed in the figure.}

\item{rightPanel}{Single \code{\link[base]{numeric}} indicating the right column
index of the panel that is to be placed in the figure. Important for
definition of panel spanning (see examples).}

\item{Single}{\code{\link[base]{character}} used for the panel label, or
\code{NULL} to automatically generate the label.}
}
\value{
Returns the \code{\link[gtable]{gtable}} object fed to it
(\code{figure}) with the addition of the \code{panel}.
}
\description{
A convenience function adding graphical objects to a
\code{\link[gtable]{gtable}} constructed by \code{\link{multipanelfigure}}.
}
\details{
Currently supported as panel-representing objects (\code{panel}) are
\enumerate{
  \item{\code{\link[ggplot2]{ggplot}} objects.}
  \item{\code{\link[grid]{grob}} objects.}
  \item{\code{\link[grid]{gList}} objects.}
  \item{\code{\link[lattice]{trellis.object}} objects.}
  \item{Single \code{\link{character}} objects representing paths to readable
    portable network graphics (\code{*.png}), tagged image file format
    (\code{*.tiff}/\code{*.tif}) or joint photographic experts group
    (\code{*.jpg}/\code{*.jpeg}) files, which will be read and placed into
    panels as requested.}}
Note that \code{*.jpg}/\code{*.jpeg} files must be produced
using the dimensions of the panle(s) they are to be placed in for sensible
results. \code{\link[ggplot2]{ggplot}} objects obviously auto-scale and
\code{*.tiff}/\code{*.tif}, as well as \code{*.png} files have their native
sizes read out of the file (which isn't working for
\code{*.jpg}/\code{*.jpeg}).
\pkg{lattice}-generated \code{\link[lattice]{trellis.object}}s are converted to
\code{grob}s using \code{grid.grabExpr(print(x))}, the side effects of which
with respect to plot formatting are not well studied.
}
\examples{
# First, some setup; see below for the use of addpanel

# Make a grid grob
a_grob <- grid::linesGrob(arrow = grid::arrow())
# Make a simple ggplot object to fill panels
ggp <- ggplot2::ggplot(mtcars, ggplot2::aes(disp, mpg)) +
  ggplot2::geom_point()

# Save the plot to JPEG, PNG, and TIFF file for later
tmpFileJpeg <- tempfile(fileext = ".jpg")
ggplot2::ggsave(
  filename = tmpFileJpeg,
  plot = ggp + ggplot2::ggtitle("a jpeg"),
  width = 60, height = 40,
  units = "mm", dpi = 300)
tmpFilePng <- tempfile(fileext = ".png")
ggplot2::ggsave(
  filename = tmpFilePng,
  plot = ggp + ggplot2::ggtitle("a png"),
  width = 55, height = 60,
  units = "mm", dpi = 300)
tmpFileTiff <- tempfile(fileext = ".tiff")
ggplot2::ggsave(
  filename = tmpFileTiff,
  plot = ggp + ggplot2::ggtitle("a tiff"),
  width = 60, height = 125,
  units = "mm", dpi = 300)

# addpanel works best with pipes
`\%<>\%` <- magrittr::`\%<>\%`

# ------------------------------------------------------------------

# Now, the actual example!
# Create the figure layout
(Figure <- multipanelfigure(
  widths = c(20,30,60),
  heights = c(40,60,60,60)))

# Fill the top-left panel using the grob object directly
(Figure \%<>\% addpanel(a_grob))

# Add the ggplot object directly to the top row, second column.
(Figure \%<>\% addpanel(ggp, leftPanel = 2))

# JPEG, PNG, and TIFF images are added by passing the path to their file.
# Add the JPEG to the top row, third column
(Figure \%<>\% addpanel(tmpFileJpeg, leftPanel = 3))

# Add the PNG to the second row, first and second column
(Figure \%<>\% addpanel(tmpFilePng,
    topPanel = 2, leftPanel = 1, rightPanel = 2))

# Add the TIFF to the second and third rows, third column
(Figure \%<>\% addpanel(tmpFileTiff,
    topPanel = 2, bottomPanel = 3, leftPanel = 3))
\donttest{
# lattice/trellis plot objects are also added directly
Depth <- lattice::equal.count(quakes$depth, number=8, overlap=0.1)
latticePlot_trellis <- lattice::xyplot(lat ~ long | Depth, data = quakes)
# Add the lattice plot to the third row, first and second column
(Figure \%<>\% addpanel(latticePlot_trellis,
  topPanel = 3, leftPanel = 1, rightPanel = 2))

# Incorporate a gList object (such as produced by VennDigram)
require(VennDiagram)
venn_plot <- VennDiagram::venn.diagram(
  x = list(A = 1:150, B = 121:170), filename = NULL)
# Add the venn diagram to the fourth row, first and second columns
(Figure \%<>\% addpanel(
  venn_plot,
  topPanel = 4, leftPanel = 1, rightPanel = 2))

# Incorporate a base plot figure (produces minor margin issues)
base_plot <- capturebaseplot(
 heatmap(
   cor(USJudgeRatings), Rowv = FALSE, symm = TRUE, col = topo.colors(16),
   distfun = function(c) as.dist(1 - c), keep.dendro = TRUE))
# Add the heatmap to the fourth row, third column
(Figure \%<>\% addpanel(
  base_plot,
  topPanel = 4, leftPanel = 3))
}
}
\author{
Johannes Graumann
}
\seealso{
\code{\link[gtable]{gtable}}, \code{\link{multipanelfigure}},
\code{\link[tiff]{readTIFF}}, \code{\link[png]{readPNG}},
\code{\link[jpeg]{readJPEG}}
}

